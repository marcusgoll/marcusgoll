name: CI/CD Pipeline - Build, Test, Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Security: Explicit permissions (principle of least privilege)
permissions:
  contents: read      # Read code for checkout
  packages: write     # Push to GitHub Container Registry (GHCR)
  actions: read       # Read workflow status for summaries

jobs:
  build:
    name: Build and Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          PUBLIC_URL: ${{ secrets.PUBLIC_URL }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.PUBLIC_URL }}
          NODE_ENV: "production"
          # Ghost CMS (using demo values from secrets for consistency)
          GHOST_API_URL: ${{ secrets.GHOST_API_URL }}
          GHOST_CONTENT_API_KEY: ${{ secrets.GHOST_CONTENT_API_KEY }}
          # Optional vars (not required for build)
          DATABASE_URL: ""
          NEXTAUTH_SECRET: ""
          NEXTAUTH_URL: ""
          RESEND_API_KEY: ""
          ADMIN_EMAIL: ""

      - name: Build Summary
        run: |
          echo "## Build Complete ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Lint**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Type Check**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          echo "**Build**: ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "### CI/CD Automated Deployment üöÄ" >> $GITHUB_STEP_SUMMARY
            echo "Next steps: Docker build and VPS deployment" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Pull Request Build" >> $GITHUB_STEP_SUMMARY
            echo "Build completed. Deployment skipped for PR branches." >> $GITHUB_STEP_SUMMARY
          fi

  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate short SHA
        id: vars
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/marcusgoll:latest
            ghcr.io/${{ github.repository_owner }}/marcusgoll:sha-${{ env.SHORT_SHA }}
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_SITE_URL=${{ secrets.PUBLIC_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker Build Summary
        run: |
          echo "## Docker Build Complete ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags Pushed**:" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/marcusgoll:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ github.repository_owner }}/marcusgoll:sha-${{ env.SHORT_SHA }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: GitHub Container Registry (GHCR)" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production (Dokploy)
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Trigger Dokploy Deployment
        run: |
          echo "Triggering Dokploy deployment webhook..."
          RESPONSE=$(curl -X POST "${{ secrets.DOKPLOY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.DOKPLOY_API_KEY }}" \
            -d '{"source":"github","ref":"${{ github.ref }}","sha":"${{ github.sha }}"}' \
            -w "\n%{http_code}" -s)

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | head -n-1)

          echo "HTTP Status: $HTTP_CODE"
          echo "Response: $BODY"

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            echo "‚úÖ Deployment triggered successfully"
          else
            echo "‚ùå Deployment trigger failed with status $HTTP_CODE"
            exit 1
          fi

      - name: Wait for Deployment
        run: |
          echo "Waiting 30 seconds for deployment to complete..."
          sleep 30

      - name: Post-Deployment Health Check
        run: |
          echo "Checking site health at ${{ secrets.PUBLIC_URL }}..."
          for i in {1..5}; do
            echo "Attempt $i/5..."
            if curl -f -m 10 --retry 2 --retry-delay 5 ${{ secrets.PUBLIC_URL }}; then
              echo "‚úÖ Health check passed"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "‚ö†Ô∏è  Site health check failed after 5 attempts (non-blocking)"
              # Non-blocking - allow deployment to succeed even if health check times out
            fi
            sleep 10
          done

      - name: Deployment Success Summary
        run: |
          echo "## Deployment Successful ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Platform**: Dokploy" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment URL**: ${{ secrets.PUBLIC_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag**: \`ghcr.io/${{ github.repository_owner }}/marcusgoll:latest\`" >> $GITHUB_STEP_SUMMARY

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [build, docker-build, deploy-production]
    if: always()

    steps:
      - name: Check pipeline status
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "‚ùå Build failed. Check logs above."
            exit 1
          fi
          if [ "${{ needs.docker-build.result }}" != "success" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "‚ùå Docker build failed. Check logs above."
            exit 1
          fi
          if [ "${{ needs.deploy-production.result }}" != "success" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "‚ùå Production deployment failed. Check logs above."
            exit 1
          fi
          echo "‚úÖ CI/CD pipeline completed successfully!"
