# ==============================================================================
# ENVIRONMENT VARIABLES TEMPLATE
# ==============================================================================
# Copy this file to .env.local for local development
# Never commit .env.local or .env.production to git!
#
# For production deployment, see: docs/ENV_SETUP.md
# ==============================================================================

# ------------------------------------------------------------------------------
# Next.js Configuration (REQUIRED)
# ------------------------------------------------------------------------------

# PUBLIC_URL - Base URL for the application
# Required: YES (always)
# Development: http://localhost:3000
# Production: https://marcusgoll.com
# Purpose: Used for absolute URLs in emails, sitemap, RSS feed
PUBLIC_URL="http://localhost:3000"

# NODE_ENV - Environment mode
# Required: YES (auto-set by Next.js, included for clarity)
# Values: development | production | test
# Purpose: Controls Next.js optimizations and behavior
NODE_ENV="development"

# ------------------------------------------------------------------------------
# Content Management (MDX-based)
# ------------------------------------------------------------------------------
# Content is managed as MDX files stored in the /content directory (version-controlled in Git)
# No CMS needed - all content is static, versioned, and deployed with code
# Blog posts: content/posts/*.mdx
# Frontmatter format: title, date, tags, excerpt, etc.

# NEXT_PUBLIC_SITE_URL - Canonical site URL
# Required: Yes
# Format: https://domain.com (no trailing slash)
# Development: http://localhost:3000
# Production: https://marcusgoll.com
# Purpose: Used for canonical URLs, Open Graph tags, structured data
# Note: Must match PUBLIC_URL or override it for specific use cases
NEXT_PUBLIC_SITE_URL="http://localhost:3000"

# ------------------------------------------------------------------------------
# Database (PostgreSQL via Supabase) - OPTIONAL
# ------------------------------------------------------------------------------
# Only required when database features are implemented
# Currently not needed for MDX-based blog

# DATABASE_URL - PostgreSQL connection string
# Required: No (optional until database features added)
# Format: postgresql://[user]:[password]@[host]:[port]/[database]
# Development: Use local PostgreSQL or Supabase cloud
# Production: Production PostgreSQL connection string
# Purpose: Main database connection for Prisma ORM
# Where to get: Supabase dashboard > Project Settings > Database > Connection string
DATABASE_URL="postgresql://postgres:postgres@localhost:5432/marcusgoll_dev"

# DIRECT_DATABASE_URL - Direct PostgreSQL connection (bypasses pooling)
# Required: No (optional for migrations)
# Format: Same as DATABASE_URL but direct connection
# Purpose: Used by Prisma migrations to bypass connection pooling
# When to use: Only needed if DATABASE_URL uses connection pooling (PgBouncer)
# DIRECT_DATABASE_URL="postgresql://postgres:postgres@localhost:5432/marcusgoll_dev"

# ------------------------------------------------------------------------------
# Supabase (Authentication & Storage) - OPTIONAL
# ------------------------------------------------------------------------------
# Only required when auth/storage features are implemented
# Currently not needed for MDX-based blog

# NEXT_PUBLIC_SUPABASE_URL - Supabase API URL
# Required: No (optional until auth features added)
# Format: https://[project-id].supabase.co or custom domain
# Development: http://localhost:54321 (local Supabase) or cloud URL
# Production: https://api.marcusgoll.com (custom domain) or Supabase cloud URL
# Purpose: Client-side Supabase API endpoint (exposed to browser)
# Where to get: Supabase dashboard > Project Settings > API > Project URL
NEXT_PUBLIC_SUPABASE_URL="http://localhost:54321"

# NEXT_PUBLIC_SUPABASE_ANON_KEY - Supabase anonymous key (public)
# Required: No (optional until auth features added)
# Format: Long base64-encoded JWT token (starts with "eyJ")
# Development: Get from local Supabase or cloud dashboard
# Production: Get from production Supabase project
# Purpose: Public API key for client-side requests (safe to expose)
# Where to get: Supabase dashboard > Project Settings > API > anon/public key
# Security: Safe to expose - respects Row Level Security policies
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key-here"

# SUPABASE_SERVICE_ROLE_KEY - Supabase service role key (secret)
# Required: No (optional until admin features added)
# Format: Long base64-encoded JWT token (starts with "eyJ")
# Development: Get from local Supabase or cloud dashboard
# Production: Get from production Supabase project
# Purpose: Admin API key for server-side requests (NEVER expose to browser)
# Where to get: Supabase dashboard > Project Settings > API > service_role key
# Security: KEEP SECRET - bypasses Row Level Security
SUPABASE_SERVICE_ROLE_KEY="your-service-role-key-here"

# ------------------------------------------------------------------------------
# Newsletter Service (Resend or Mailgun) - OPTIONAL
# ------------------------------------------------------------------------------
# Only required when newsletter features are implemented
# Currently not needed for MDX-based blog

# RESEND_API_KEY - Resend API key for newsletter emails
# Required: No (optional until newsletter features added)
# Format: re_[random string]
# Development: Test API key from Resend dashboard
# Production: Production API key from Resend
# Purpose: Send newsletter emails and transactional emails
# Where to get: https://resend.com/api-keys
# Alternative: Use MAILGUN_API_KEY instead if using Mailgun
RESEND_API_KEY="your-resend-api-key-here"

# MAILGUN_API_KEY - Mailgun API key (alternative to Resend)
# Required: No (optional alternative to Resend)
# Format: key-[random string]
# Purpose: Alternative email service to Resend
# Where to get: https://app.mailgun.com/app/account/security/api_keys
# Note: Only use if you prefer Mailgun over Resend
# MAILGUN_API_KEY="your-mailgun-api-key-here"

# NEWSLETTER_FROM_EMAIL - Verified sender email address
# Required: No (optional until newsletter features added)
# Format: email@domain.com or "Name <email@domain.com>"
# Development: test@marcusgoll.com (must be verified in email service)
# Production: newsletter@marcusgoll.com (must be verified)
# Purpose: "From" address for newsletter and transactional emails
# Where to verify: Resend dashboard > Domains or Mailgun dashboard > Sending > Domains
# Important: Email domain must be verified before sending
NEWSLETTER_FROM_EMAIL="newsletter@marcusgoll.com"

# ------------------------------------------------------------------------------
# Third-Party Services (Optional)
# ------------------------------------------------------------------------------

# NEXT_PUBLIC_GA_ID - Google Analytics 4 measurement ID
# Required: No (optional for MVP)
# Format: G-XXXXXXXXXX
# Development: Not needed (or use test property)
# Production: Production GA4 measurement ID
# Purpose: Track page views, content track attribution, and user interactions
# Where to get: Google Analytics > Admin > Data Streams > Measurement ID
# Note: Prefixed with NEXT_PUBLIC_ to expose to client-side for event tracking
NEXT_PUBLIC_GA_ID="G-SE02S59BZW"

# ------------------------------------------------------------------------------
# Maintenance Mode (Optional)
# ------------------------------------------------------------------------------

# MAINTENANCE_MODE - Enable/disable site-wide maintenance mode
# Required: No (optional, defaults to "false" if not set)
# Values: "true" | "false"
# Development: "false" (allow normal access)
# Production: "true" (enable maintenance mode during deployments or migrations)
# Purpose: Show maintenance page to external visitors while allowing developer bypass
# Toggle: Change value and redeploy (no code changes needed)
# Security: When enabled, all traffic redirected to /maintenance except:
#   - Developers with valid bypass token (?bypass=TOKEN)
#   - Static assets (/_next/*, /images/*, /fonts/*)
#   - Health check endpoint (/api/health)
MAINTENANCE_MODE="false"

# MAINTENANCE_BYPASS_TOKEN - Secret token for bypassing maintenance mode
# Required: No (optional, but REQUIRED when MAINTENANCE_MODE="true")
# Format: 64-character hex string (256-bit entropy)
# Development: Generate once and keep in .env.local
# Production: Generate new token for production (NEVER reuse dev token)
# Purpose: Allows developers to access site during maintenance via ?bypass=TOKEN
# Generation: openssl rand -hex 32
# Security: KEEP SECRET - anyone with this token can bypass maintenance mode
# Usage: Visit https://yoursite.com/?bypass=TOKEN to set bypass cookie (24-hour expiration)
# Important: Token is removed from URL after validation (prevents sharing bypass links)
MAINTENANCE_BYPASS_TOKEN="generate-with-openssl-rand-hex-32"

# ==============================================================================
# SETUP INSTRUCTIONS
# ==============================================================================
#
# 1. Local Development:
#    cp .env.example .env.local
#    # Edit .env.local with your development values
#    npm run dev
#
# 2. Docker Compose:
#    cp .env.example .env
#    # Edit .env with Docker-friendly values
#    docker-compose up
#
# 3. Production Deployment:
#    See docs/ENV_SETUP.md for secure transfer instructions
#
# ==============================================================================
# SECURITY REMINDERS
# ==============================================================================
#
# ✅ DO:
#   - Keep .env.local and .env.production in .gitignore
#   - Use different values for development vs production
#   - Rotate secrets regularly (especially after team changes)
#   - Use strong, unique passwords for database connections
#
# ❌ DON'T:
#   - Commit .env files to git (only .env.example is safe)
#   - Share .env.production via email or chat
#   - Use production secrets in development
#   - Expose SUPABASE_SERVICE_ROLE_KEY to browser
#
# ==============================================================================
# Database configuration updated
